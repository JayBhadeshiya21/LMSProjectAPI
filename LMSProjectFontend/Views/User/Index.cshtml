@model List<UserModel>
@{
    ViewData["Title"] = "User List";
}

<div class="container-xxl flex-grow-1 container-p-y">

    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb mb-4">
            <li class="breadcrumb-item"><a href="/">Dashboard</a></li>
            <li class="breadcrumb-item active" aria-current="page">Users</li>
        </ol>
    </nav>

    <!-- Page Title -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4 class="fw-bold">User List</h4>
        <a asp-controller="User" asp-action="AddEdit"  class="btn btn-success">
            <i class="bx bx-plus"></i> Add New User
        </a>
    </div>

    <!-- Alert Messages -->

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- User Table Card -->
    <div class="card">
        <div class="table-responsive text-nowrap">
            <table class="table">
                <thead class="table-light">
                    <tr>
                        <th>Full Name</th>
                        <th>Email</th>
                        <th>Password</th>
                        <th>Role</th>
                        <th>Created At</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="courseTableBody" class="table-border-bottom-0">
                    @foreach (var user in Model)
                    {
                        <tr>
                            <td><strong>@user.FullName</strong></td>
                            <td>@user.Email</td>
                            <td>@user.Password</td>
                            <td>@user.Role</td>
                            <td>@user.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                            <td>
                                @if (user.Status)
                                {
                                    <span class="badge bg-label-success me-1">Active</span>
                                }
                                else
                                {
                                    <span class="badge bg-label-secondary me-1">Inactive</span>
                                }
                            </td>
                            <td>
                                <a asp-controller="User" asp-action="AddEdit" asp-route-id="@user.UserId" class="btn btn-sm btn-outline-warning me-1">
                                    <i class="bx bx-edit-alt"></i> Edit
                                </a>
                                <a asp-controller="User" asp-action="Delete" asp-route-id="@user.UserId" class="btn btn-sm btn-outline-danger">
                                    <i class="bx bx-trash"></i> Delete
                                </a>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- 🔹 Pagination -->
        <nav aria-label="User pagination">
            <ul class="pagination justify-content-center mt-3" id="pagination"></ul>
        </nav>
    </div>

</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const rowsPerPage = 5;
        const tableBody = document.getElementById("courseTableBody");
        const rows = tableBody.querySelectorAll("tr");
        const totalRows = rows.length;
        const totalPages = Math.ceil(totalRows / rowsPerPage);
        const pagination = document.getElementById("pagination");

        function showPage(page) {
            let start = (page - 1) * rowsPerPage;
            let end = start + rowsPerPage;

            rows.forEach((row, index) => {
                row.style.display = (index >= start && index < end) ? "" : "none";
            });

            pagination.querySelectorAll("li").forEach(li => li.classList.remove("active"));
            pagination.querySelector(`[data-page='${page}']`)?.classList.add("active");
        }

        function createPagination() {
            pagination.innerHTML = "";

            pagination.innerHTML += `
                <li class="page-item"><a class="page-link" href="#" id="prev">Previous</a></li>
            `;

            for (let i = 1; i <= totalPages; i++) {
                pagination.innerHTML += `
                    <li class="page-item" data-page="${i}">
                        <a class="page-link" href="#">${i}</a>
                    </li>
                `;
            }

            pagination.innerHTML += `
                <li class="page-item"><a class="page-link" href="#" id="next">Next</a></li>
            `;

            pagination.querySelectorAll("a").forEach(a => {
                a.addEventListener("click", function (e) {
                    e.preventDefault();
                    let page = this.parentElement.getAttribute("data-page");

                    if (this.id === "prev") {
                        let current = pagination.querySelector(".active")?.getAttribute("data-page");
                        page = Math.max(1, parseInt(current) - 1);
                    }
                    if (this.id === "next") {
                        let current = pagination.querySelector(".active")?.getAttribute("data-page");
                        page = Math.min(totalPages, parseInt(current) + 1);
                    }

                    showPage(page);
                });
            });
        }

        if (totalPages > 1) {
            createPagination();
            showPage(1);
        }
    });
</script>
