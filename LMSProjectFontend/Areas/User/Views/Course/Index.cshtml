@model List<CourseModel>
@{
    ViewData["Title"] = "Available Courses";
}

<div class="container-xxl flex-grow-1 container-p-y">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb mb-4">
            <li class="breadcrumb-item"><a href="/">Dashboard</a></li>
            <li class="breadcrumb-item active" aria-current="page">Courses</li>
        </ol>
    </nav>

    <!-- Alert Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bx bx-check-circle me-2"></i>
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bx bx-error-circle me-2"></i>
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h4 class="fw-bold mb-1">Available Courses</h4>
            <p class="text-muted">Explore our comprehensive course catalog</p>
        </div>
        <div class="d-flex gap-2">
            <div class="input-group" style="width: 300px;">
                <input type="text" class="form-control" placeholder="Search courses..." id="searchInput">
                <button class="btn btn-outline-secondary" type="button" id="searchBtn">
                    <i class="bx bx-search"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    <div id="loadingState" class="text-center py-5" style="display: none;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="text-muted mt-3">Loading courses...</p>
    </div>

    <!-- Course Cards Grid -->
    <div class="row" id="coursesContainer">
        @if (Model != null && Model.Any())
        {
            @foreach (var course in Model)
            {
                <div class="col-lg-4 col-md-6 mb-4 course-card" data-title="@course.Title?.ToLower()" data-teacher="@course.TeacherName?.ToLower()" data-description="@course.Description?.ToLower()">
                    <div class="card h-100 shadow-sm">
                        <!-- Course Image -->
                        <div class="card-img-top position-relative" style="height: 200px; overflow: hidden;">
                            @if (!string.IsNullOrEmpty(course.ImageUrl))
                            {
                                
                                    var imageSrc = course.ImageUrl.StartsWith("http", StringComparison.OrdinalIgnoreCase)
                                    ? course.ImageUrl
                                    : $"http://localhost:5281/{course.ImageUrl.TrimStart('/')}";
                                
                                <img src="@imageSrc" 
                                     alt="@course.Title" 
                                     class="w-100 h-100" 
                                     style="object-fit: cover; transition: transform 0.3s ease;"
                                     onerror="this.onerror=null; this.src='/assets/img/placeholder.jpg';"
                                     onmouseover="this.style.transform='scale(1.05)'"
                                     onmouseout="this.style.transform='scale(1)'" />
                            }
                            else
                            {
                                <div class="w-100 h-100 bg-gradient-primary d-flex align-items-center justify-content-center">
                                    <i class="bx bx-book-open text-white" style="font-size: 3rem;"></i>
                                </div>
                            }
                            <!-- Course Badge -->
                            <div class="position-absolute top-0 end-0 m-2">
                                <span class="badge bg-success">Available</span>
                            </div>
                        </div>

                        <!-- Card Body -->
                        <div class="card-body d-flex flex-column">
                            <!-- Course Title -->
                            <h5 class="card-title fw-bold mb-2 text-truncate" title="@course.Title">
                                @course.Title
                            </h5>

                            <!-- Course Description -->
                            <p class="card-text text-muted flex-grow-1" style="font-size: 0.9rem;">
                                @(string.IsNullOrWhiteSpace(course.Description) 
                                    ? "No description available." 
                                    : (course.Description.Length > 120 
                                        ? course.Description.Substring(0, 120) + "..." 
                                        : course.Description))
                            </p>

                            <!-- Course Info -->
                            <div class="mb-3">
                                <div class="d-flex align-items-center mb-2">
                                    <i class="bx bx-user text-primary me-2"></i>
                                    <small class="text-muted">
                                        <strong>Instructor:</strong> @course.TeacherName
                                    </small>
                                </div>
                                <div class="d-flex align-items-center">
                                    <i class="bx bx-calendar text-primary me-2"></i>
                                    <small class="text-muted">
                                        <strong>Created:</strong> @course.CreatedAt.ToString("MMM dd, yyyy")
                                    </small>
                                </div>
                            </div>

                            <!-- Action Buttons -->
                            <div class="d-grid gap-2">
                                <form method="post" action="@Url.Action("Enroll", "Course", new { area = "User" })">
                                    <input type="hidden" name="courseId" value="@course.CourseId" />
                                    <button class="btn btn-primary" type="submit">
                                        <i class="bx bx-plus-circle me-1"></i> Enroll Now
                                    </button>
                                </form>
                                <div class="d-flex gap-2">
                                    <a class="btn btn-outline-secondary btn-sm flex-fill" href="@Url.Action("Details", "Course", new { area = "User", id = course.CourseId })">
                                        <i class="bx bx-info-circle me-1"></i> View Details
                                    </a>
                                    <a class="btn btn-outline-success btn-sm flex-fill" href="@Url.Action("AddFeedback", "Feedback", new { area = "User", courseId = course.CourseId })">
                                        <i class="bx bx-message-dots me-1"></i> Feedback
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="text-center py-5">
                    <i class="bx bx-book-open text-muted" style="font-size: 4rem;"></i>
                    <h5 class="text-muted mt-3">No courses available</h5>
                    <p class="text-muted">Check back later for new course offerings.</p>
                </div>
            </div>
        }
    </div>

    <!-- No Results Message (Hidden by default) -->
    <div id="noResults" class="text-center py-5" style="display: none;">
        <i class="bx bx-search text-muted" style="font-size: 4rem;"></i>
        <h5 class="text-muted mt-3">No courses found</h5>
        <p class="text-muted">Try adjusting your search criteria.</p>
    </div>
</div>

<!-- Course Details Modal -->
<div class="modal fade" id="courseDetailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="courseDetailsTitle">Course Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="courseDetailsBody">
                <!-- Course details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="enrollFromModal">Enroll Now</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Auto-hide alerts after 5 seconds
            setTimeout(function() {
                const alerts = document.querySelectorAll('.alert');
                alerts.forEach(alert => {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                });
            }, 5000);
        });

        // Search functionality with debouncing
        let searchTimeout;
        document.getElementById('searchInput').addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                performSearch();
            }, 300);
        });

        function performSearch() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const courseCards = document.querySelectorAll('.course-card');
            let visibleCount = 0;

            courseCards.forEach(card => {
                const title = card.dataset.title || '';
                const teacher = card.dataset.teacher || '';
                const description = card.dataset.description || '';

                if (title.includes(searchTerm) || teacher.includes(searchTerm) || description.includes(searchTerm)) {
                    card.style.display = 'block';
                    visibleCount++;
                } else {
                    card.style.display = 'none';
                }
            });

            // Show/hide no results message
            const noResults = document.getElementById('noResults');
            const coursesContainer = document.getElementById('coursesContainer');
            
            if (visibleCount === 0 && searchTerm !== '') {
                noResults.style.display = 'block';
                coursesContainer.style.display = 'none';
            } else {
                noResults.style.display = 'none';
                coursesContainer.style.display = 'block';
            }
        }

        // Search button click
        document.getElementById('searchBtn').addEventListener('click', function() {
            performSearch();
        });

        // removed placeholder JS for enrollment and modal details; using real routes now

        // Add smooth scrolling for better UX
        function smoothScrollToTop() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        }

        // Add scroll to top button functionality
        window.addEventListener('scroll', function() {
            const scrollBtn = document.getElementById('scrollToTop');
            if (scrollBtn) {
                if (window.pageYOffset > 300) {
                    scrollBtn.style.display = 'block';
                } else {
                    scrollBtn.style.display = 'none';
                }
            }
        });
    </script>
}
